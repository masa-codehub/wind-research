github_issues_list:
  milestones:
    - id: "M1"
      title: "コマンドラインインターフェースと基本設定 (EPIC-01)"
      description: "CUIの基本的なやり取りとパラメータ処理を確立する。"
    - id: "M2"
      title: "データ取得パイプラインのコア実装 (EPIC-02, EPIC-03)"
      description: "気象庁からのデータ取得、解析、主要なデータ変換ロジックを実装する。"
    - id: "M3"
      title: "データ出力と統合 (EPIC-04)"
      description: "変換されたデータを統合し、CSVファイルとして出力する機能を完成させる。"
    - id: "M4"
      title: "運用支援とユーザビリティ向上 (EPIC-05)"
      description: "進捗表示、ロギング、エラーハンドリングを強化し、ユーザーが安心して使えるようにする。"
    - id: "M5"
      title: "システム基盤と品質保証 (EPIC-06)"
      description: "Docker対応、テスト戦略の実行、非機能要件の最終確認と調整を行う。"
    - id: "MVP_Release"
      title: "MVPリリース"
      description: "主要なデータ取得・変換・出力機能が一通り動作し、ユーザーが価値を享受できる状態。"

  labels:
    type:
      - "type:user-story"
      - "type:technical-task"
      - "type:bug"
      - "type:chore"
      - "type:refactoring"
      - "type:test"
      - "type:documentation"
      - "type:discussion"
    layer:
      - "layer:domain"
      - "layer:usecase"
      - "layer:adapter-cui"
      - "layer:adapter-web"
      - "layer:adapter-file"
      - "layer:infrastructure"
    epic:
      - "epic:EPIC-01"
      - "epic:EPIC-02"
      - "epic:EPIC-03"
      - "epic:EPIC-04"
      - "epic:EPIC-05"
      - "epic:EPIC-06"
    feature: # 具体的なフィーチャーラベル例 (必要に応じて追加)
      - "feature:cli-params"
      - "feature:html-parsing"
      - "feature:data-conversion"
      - "feature:csv-output"
      - "feature:progress-display"
      - "feature:logging"
      - "feature:error-handling"
      - "feature:docker"
    ddd:
      - "ddd:domain-modeling"
      - "ddd:ubiquitous-language"
      - "ddd:aggregate"
      - "ddd:value-object"
      - "ddd:domain-service"
      - "ddd:domain-event"
    priority:
      - "priority:high"
      - "priority:medium"
      - "priority:low"
    other:
      - "TDD"
      - "CA" # Clean Architecture
      - "needs-discussion"
      - "blocked"
      - "good-first-issue"
      - "python"
      - "docker"

  issues:
    - id: "US-001_Issue" # GitHub Issue Title usually includes type and original ID
      title: "[UserStory] コマンドラインからの必須パラメータ指定 (US-001)"
      description: |
        ユーザーストーリー US-001 を実装する。
        > データ利用者として、コマンドラインから必須パラメータ（観測地点、期間）を指定して風況データ収集処理を開始したい。それは、特定の条件のデータを手軽に取得するためだ。
      implementation_tasks:
        - "[x] `(Adapter-CUI)` `src/adapters/cui/argument_parser.py` にて、`argparse` を用いて必須引数 (`--prefecture_no`, `--block_no`, `--start_date`, `--days`) を定義した。"
        - "[x] `(Domain)` 日付書式(`YYYY-MM-DD`)と妥当性を検証する値オブジェクト `DateValue` を `src/domain/models/date.py` に実装した。"
        - "[x] `(UseCase)` CUIからの入力を受け取る `CollectWindDataInput` DTOと、処理の起点となる `CollectWindDataUsecase` を `src/usecases/collect_wind_data_usecase.py` に実装した。"
        - "[x] `(Adapter-CUI)` `main.py` にて、引数解析エラー (`SystemExit`) とドメイン/ユースケース由来の不正値エラー (`ValueError`) を捕捉し、エラーメッセージ出力と終了コード制御を行うロジックを実装した。"
        - "[x] `(Test)` `DateValue` の単体テスト (`tests/test_date_value.py`) と、`main.py` の振る舞いを検証するE2Eテスト (`tests/test_main_e2e.py`) を実装した。"
      acceptance_criteria:
        - "AC-001-01: コマンドラインで都道府県番号、地点番号、開始年月日、取得期間（日数または終了年月日）を指定してスクリプトを実行できる。"
        - "AC-001-02: 指定された必須パラメータが正しく解釈され、データ取得処理が開始される（または後続処理のスタブが呼ばれる）。"
        - "AC-001-03: 必須パラメータのいずれかが欠けている場合、適切なエラーメッセージが表示され、処理は開始されない。"
        - "AC-001-04: パラメータの型やフォーマットが不正な場合（例：日付が不正）、エラーメッセージが表示され、処理は開始されない。"
      related_requirement: "US-001 (参照元: FR-001-01, FR-001-03, UC-001)"
      dependencies:
        - "TASK-001_Issue"
      milestone: "M1"
      labels:
        - "type:user-story"
        - "epic:EPIC-01"
        - "feature:cli-params"
        - "layer:adapter-cui"
        - "layer:usecase"
        - "priority:high"
        - "TDD"
      notes: null

    - id: "US-002_Issue"
      title: "[UserStory] コマンドラインからのオプションパラメータ指定 (US-002)"
      description: |
        ユーザーストーリー US-002 を実装する。
        > データ利用者として、コマンドラインからオプションパラメータ（データ取得間隔、出力ファイルパス）を指定したい。それは、取得プロセスをカスタマイズし、出力結果を管理しやすくするためだ。
      implementation_tasks:
        - "[ ] (Adapter-CUI) オプションパラメータ（データ取得間隔、出力ファイルパス）の引数定義を追加する (US-001のパーサーを拡張)"
        - "[ ] (Adapter-CUI/UseCase) データ取得間隔のバリデーションロジック（数値、下限3秒）を実装する。デフォルト値（5秒）を設定する。"
        - "[ ] (Adapter-CUI/UseCase) 出力ファイルパスのバリデーション（文字列として妥当か）を実装する。デフォルト値の命名規則とパスを設定する。"
        - "[ ] (UseCase) これらのオプション値を後続処理で利用できるようにする。"
        - "[ ] (Test) オプションパラメータの解釈、バリデーション、デフォルト値設定に関するユニットテストを作成する (TDD)"
      acceptance_criteria:
        - "AC-002-01: データ取得間隔（秒数）をオプションで指定できる。指定がない場合はデフォルト5秒で動作する。"
        - "AC-002-02: 実際に適用されるリクエスト間隔は、TASK-ACCESS-POLICY-01で定義されたシステム内部のドメイン別最小アクセス間隔と、ユーザーが指定した間隔のうち、より長い方の値となる。例えば、システム最小値が8秒のドメインに対しユーザーが3秒を指定した場合は8秒間隔となり、ユーザーが10秒を指定した場合は10秒間隔となる。"
        - "AC-002-03: 出力CSVファイルパスをオプションで指定でき、処理結果がそのパスに保存される。指定がない場合はデフォルトの命名規則とパスで保存される。"
      related_requirement: "US-002 (参照元: FR-001-02, FR-002-03)"
      dependencies:
        - "US-001_Issue"
      milestone: "M1"
      labels:
        - "type:user-story"
        - "epic:EPIC-01"
        - "feature:cli-params"
        - "layer:adapter-cui"
        - "layer:usecase"
        - "layer:infrastructure"
        - "priority:medium"
        - "TDD"
      notes: null

    - id: "US-003_Issue"
      title: "[UserStory] ヘルプ情報の表示 (US-003)"
      description: |
        ユーザーストーリー US-003 を実装する。
        > データ利用者として、コマンドラインオプションでツールのヘルプ情報を表示したい。それは、ツールの使い方や指定可能なパラメータを簡単に確認するためだ。
      implementation_tasks:
        - "[ ] `(Adapter-CUI)` コマンドライン引数パーサーにヘルプオプション (`-h`, `--help`) を設定し、自動生成されるヘルプメッセージをカスタマイズして必須・オプションパラメータの説明を充実させる (TASK-001 と連携)"
        - "[ ] `(Test)` ヘルプオプション実行時の出力を検証するテストを作成する（可能であれば）"
      acceptance_criteria:
        - "AC-003-01: -h または --help オプションを指定して実行すると、利用可能なコマンドライン引数、オプション、およびそれらの説明がCUIに表示される。"
        - "AC-003-02: ヘルプメッセージ表示後は、データ取得処理は実行されない。"
      related_requirement: "US-003 (参照元: FR-001-04)"
      dependencies:
        - "TASK-001_Issue"
      milestone: "M1"
      labels:
        - "type:user-story"
        - "epic:EPIC-01"
        - "feature:cli-params"
        - "layer:adapter-cui"
        - "priority:medium"
        - "TDD"
      notes: null

    - id: "US-004_Issue"
      title: "[UserStory] 気象庁データURL生成ロジックの実装 (US-004)"
      description: |
        ユーザーストーリー US-004 を実装する。
        > システムとして、指定された観測地点と日付に基づき、気象庁ウェブサイトの正しいURLを動的に生成したい。それは、該当する風況データページへ確実にアクセスするためだ。
      implementation_tasks:
        - "[x] (Domain) 気象庁データページのURLテンプレート（ベースURL・クエリパラメータ名）を定数として定義し、パラメータ埋め込みでURLを生成するロジックを実装した"
        - "[x] (Domain) URL生成用のインターフェース（例: JmaUrlGenerator）を抽象化し、Adapter層で具体実装を提供した"
        - "[x] (Test) URL生成ロジックのユニットテストを tests/domain/test_jma_url_generator.py で実装し、様々な入力値・ゼロパディング・異常系を網羅した"
        - "[x] (UseCase) 期間指定時は各日付ごとにURLを生成するロジックを実装し、ユースケース層で利用するようにした"
      acceptance_criteria:
        - "AC-004-01: 入力された都道府県番号、地点番号、年月日を基に、気象庁の風況データページのURLが正しく組み立てられる。"
        - "AC-004-02: 期間指定（例: 2024年1月1日から3日間）の場合、各日付に対応するURLが順次生成されるロジックの基盤となること。"
      related_requirement: "US-004 (参照元: FR-002-01, UC-001)"
      dependencies:
        - "US-001_Issue"
      milestone: "M2"
      labels:
        - "type:user-story"
        - "epic:EPIC-02"
        - "feature:html-scraping"
        - "layer:usecase"
        - "layer:adapter-web"
        - "layer:domain"
        - "priority:high"
        - "TDD"
      notes: null

    - id: "US-005_Issue"
      title: "[UserStory] HTMLコンテンツ取得とリクエスト間隔制御 (US-005)"
      description: |
        ユーザーストーリー US-005 を実装する。
        > システムとして、生成したURLから気象庁ウェブサイトのHTMLコンテンツを、指定された間隔を空けて取得したい。それは、風況データを抽出し、かつサイトに負荷をかけないためだ。
      implementation_tasks:
        - "[x] `(Port)` `src/usecases/ports/jma_page_fetcher_port.py` に、HTML取得インターフェース `IJmaPageFetcher` とカスタム例外 `HtmlFetchingError` を定義した。"
        - "[x] `(Adapter-Web)` `src/adapters/web/jma_page_fetcher_adapter.py` に、`IJmaPageFetcher`を実装する `JmaPageFetcherAdapter` を作成した。このアダプタは `requests.Session` を使用し、`RequestThrottler` によるアクセス間隔制御、`USER_AGENT` の設定、エラー時の `HtmlFetchingError`送出とロギングを行う。"
        - "[x] `(UseCase)` `src/usecases/collect_wind_data_usecase.py` のコンストラクタを修正し、`IJmaPageFetcher` と `IUrlBuilder` を依存性注入で受け取るようにした。`CollectWindDataInput` DTO に `interval_sec` フィールド（デフォルト5.0秒）を追加した。"
        - "[x] `(UseCase)` `CollectWindDataUsecase.execute` メソッド内で、注入された `page_fetcher` を使用してHTMLコンテンツを取得し、`HtmlFetchingError` 発生時には警告ログを出力して該当日の処理をスキップするロジックを実装した。"
        - "[x] `(Adapter-CUI)` `main.py` を修正し、`JmaPageFetcherAdapter` と `JmaUrlBuilder` のインスタンスを生成して `CollectWindDataUsecase` に注入するようにした。"
        - "[x] `(Test)` `tests/adapters/web/test_jma_page_fetcher_adapter.py` に、`JmaPageFetcherAdapter` の単体テスト（成功、HTTPエラー、ネットワークエラー、User-Agent、スロットリング呼び出し）を実装した。"
        - "[x] `(Test)` `tests/test_collect_wind_data_usecase_port.py` の `CollectWindDataUsecase` の単体テストを更新・改善し、モック化したポート経由でのHTML取得成功時・失敗時の処理フロー（スキップ、ログ記録）を検証するようにした。"
      acceptance_criteria:
        - "AC-005-01: 指定されたURLに対してHTTP GETリクエストが送信され、HTMLコンテンツが取得できる。"
        - "AC-005-02: 連続して複数日のデータを取得する際、各リクエストの送信前に、TASK-ACCESS-POLICY-01で定義されたドメイン別の最小アクセス間隔を遵守した待機時間が入る。"
        - "AC-005-03: HTML取得時にネットワークエラーやHTTPエラーが発生した場合、エラーをログに記録し、該当日の処理はスキップされる（リトライはしない）。"
      related_requirement: "US-005 (参照元: FR-002-02, FR-002-03, FR-002-04, UC-001)"
      dependencies:
        - "US-004_Issue"
        - "TASK-002_Issue"
        - "TASK-004_Issue"
      milestone: "M2"
      labels:
        - "type:user-story"
        - "epic:EPIC-02"
        - "feature:html-scraping"
        - "layer:adapter-web"
        - "layer:infrastructure"
        - "priority:high"
        - "TDD"
      notes: null

    - id: "US-006_Issue"
      title: "[UserStory] HTMLからの風況データ抽出 (US-006)"
      description: |
        ユーザーストーリー US-006 を実装する。
        > システムとして、取得したHTMLコンテンツから10分毎の風況関連データ（時刻、風向文字列、風速文字列など）を正確に抽出したい。それは、後続の変換処理に必要な生データを得るためだ。
      implementation_tasks:
        - "[x] `(Adapter-Web)` `JmaHtmlParser`クラスを実装し、`BeautifulSoup`でテーブル(id='tablefix1')を特定後、`pandas.read_html` (header=1) でデータをDataFrameとして読み込み、列名をリネームするロジックを実装した。"
        - "[x] `(Adapter-Web)` DataFrameの各行から観測時刻、平均風向、平均風速、最大瞬間風速、最大瞬間風向の各文字列を抽出し、`RawWindDataDto`にマッピングするロジックを実装した。"
        - "[x] `(Domain)` `domain/dtos`配下に、HTMLから抽出した生の文字列データを保持する`RawWindDataDto`を定義した。"
        - "[x] `(UseCase/Ports)` `usecases/ports`にHTML解析処理の抽象インターフェース`IWindDataParser`とカスタム例外`HtmlParsingError`を定義した。"
        - "[x] `(Adapter-Web)` `JmaHtmlParser`で、欠損値('--'や'///'等)を`na_values=[], keep_default_na=False`オプションにより文字列として保持するようにした。"
        - "[x] `(Adapter-Web)` `JmaHtmlParser`で、テーブルや必須列が見つからない場合に`HtmlParsingError`を送出するエラーハンドリングを実装した。"
        - "[x] `(UseCase)` `CollectWindDataUsecase`で`HtmlParsingError`を捕捉し、エラーログ記録後に該当日の処理をスキップするエラーハンドリングを実装した。"
        - "[x] `(UseCase)` `CollectWindDataUsecase`で、`RawWindDataDto`の時刻文字列パース失敗時にエラーログを記録し、該当レコードをスキップするエラーハンドリングを追加した。"
        - "[x] `(UseCase)` `CollectWindDataUsecase`のコンストラクタを修正し、`IWindDataParser`に依存するようにし、DIコンテナ（`main.py`）から`JmaHtmlParser`インスタンスを受け取るようにした。"
        - "[x] `(UseCase)` `CollectWindDataUsecase`内で、`RawWindDataDto`から`WindDataRecord`への変換、特に`observed_at`の日時生成（'24:00'を当日23:59とする処理含む）を実装した。"
        - "[x] `(Test)` `tests/adapters/web/test_jma_html_parser.py`に、`sample_jma.html`を用いた正常系（データ件数、特定レコード値）、異常系（テーブル不在、列不足）のパーサー単体テストを実装した。"
        - "[x] `(Test)` `tests/test_collect_wind_data_usecase.py`に、パーサーモックを用いた`HtmlParsingError`発生時のログ記録・スキップ処理、未定義風向文字列検出時の警告ログ出力のユースケース単体テストを実装・修正した。"
      acceptance_criteria:
        - "AC-006-01: HTML内の正しいテーブル要素から、10分ごとの観測時刻、平均風向（文字列）、平均風速(m/s)、最大瞬間風速(m/s)、最大瞬間風速の風向（数値）が抽出される。"
        - "AC-006-02: データ項目が「///」（欠損）の場合も、その文字列として抽出される。"
        - "AC-006-03: HTML構造が予期せぬ形式でデータ抽出に失敗した場合、エラーをログに記録し、該当日の処理はスキップされる。"
      related_requirement: "US-006 (参照元: FR-003-01, FR-003-02, UC-001)"
      dependencies:
        - "US-005_Issue"
        - "TASK-002_Issue"
        - "TASK-004_Issue"
      milestone: "M2"
      labels:
        - "type:user-story"
        - "epic:EPIC-02"
        - "feature:html-parsing"
        - "layer:adapter-web"
        - "layer:domain"
        - "priority:high"
        - "TDD"
      notes: "[分割案あり] 実際のHTML構造の複雑さによって、テーブル特定ロジック、行パースロジック、各データ項目抽出ロジックに分割する。SP:5は大きめなので注意。"

    - id: "US-007_Issue"
      title: "[UserStory] 風向データの数値変換 (US-007)"
      description: |
        ユーザーストーリー US-007 を実装する。
        > システムとして、抽出した文字列形式の風向データを、北を0度とする数値（角度）に変換したい。それは、データを分析しやすい形式にするためだ。
      implementation_tasks:
        - "[x] `(Domain)` 不変な値オブジェクト `WindDirectionValue` を実装。変換ロジックを集約するファクトリメソッド `from_text` を持つ"
        - "[x] `(Domain)` `WindDataConverterService` をリファクタリングし、`WindDirectionValue.from_text` に処理を委譲する形に変更"
        - "[x] `(UseCase)` `CollectWindDataUsecase` の主処理フローに、データ変換と未定義値の警告ログ出力ロジックを統合"
        - "[x] `(UseCase)` テスト容易性のため、データ取得部分を `_fetch_and_process_daily_data` メソッドとして分離（スタブ実装）"
        - "[x] `(Test)` `monkeypatch` を利用してデータ取得部分をモック化し、`execute` メソッドのログ出力動作を検証する単体テストを実装"
      acceptance_criteria:
        - "AC-007-01: 16方位の風向文字列が、それぞれ定義済みの角度（float）に変換される。"
        - "AC-007-02: 風向文字列が「静穏」の場合、数値 `-1.0` に変換される。"
        - "AC-007-03: 風向文字列が「///」（欠損）の場合、数値 `-1.0` に変換される。"
        - "AC-007-04: 上記以外の未定義の風向文字列が入力された場合、エラー（または警告）をログに記録し、数値 `-1.0` として扱われる。"
      related_requirement: "US-007 (参照元: FR-004-01, FR-004-03, UC-001)"
      dependencies:
        - "US-006_Issue"
        - "TASK-004_Issue"
        - "TASK-005_Issue"
        - "TASK-006_Issue"
      milestone: "M2"
      labels:
        - "type:user-story"
        - "epic:EPIC-03"
        - "feature:data-conversion"
        - "layer:domain"
        - "layer:usecase"
        - "ddd:value-object"
        - "ddd:domain-service"
        - "priority:high"
        - "TDD"
      notes: null

    - id: "US-008_Issue"
      title: "[UserStory] 風速データの数値変換 (US-008)"
      description: |
        ユーザーストーリー US-008 を実装する。
        > システムとして、抽出した文字列形式の風速データを数値に変換したい。それは、データを分析しやすい形式にするためだ。
      implementation_tasks:
        - "[ ] `(Domain)` `WindSpeedValue` 値オブジェクトを実装する (TASK-005_Issue の一部)"
        - "[ ] `(Domain/UseCase)` `WindDataConverterService` に風速文字列を `WindSpeedValue` (数値)に変換するロジックを実装する。「///」や数字以外の文字列は-1.0に変換する (TASK-006_Issue と連携)"
        - "[ ] `(Test)` 様々な風速文字列（正常な数値、欠損「///」、数字以外）に対する変換ロジックのユニットテストを作成する (TDD)"
      acceptance_criteria:
        - "AC-008-01: 数字の風速文字列（例: 「10.5」）が、対応するfloat値（例: 10.5）に変換される。"
        - "AC-008-02: 風速文字列が「///」（欠損）の場合、数値 `-1.0` に変換される。"
        - "AC-008-03: その他の数字以外の風速文字列が入力された場合、数値 `-1.0` に変換される。"
      related_requirement: "US-008 (参照元: FR-004-02, UC-001)"
      dependencies:
        - "US-006_Issue"
        - "TASK-005_Issue"
        - "TASK-006_Issue"
      milestone: "M2"
      labels:
        - "type:user-story"
        - "epic:EPIC-03"
        - "feature:data-conversion"
        - "layer:domain"
        - "layer:usecase"
        - "ddd:value-object"
        - "ddd:domain-service"
        - "priority:high"
        - "TDD"
      notes: null

    - id: "US-009_Issue"
      title: "[UserStory] 日次風況データの時系列統合 (US-009)"
      description: |
        ユーザーストーリー US-009 を実装する。
        > システムとして、日毎に処理した10分毎の風況データを、指定された全期間にわたり時系列に統合したい。それは、期間全体の連続したデータセットを作成するためだ。
      implementation_tasks:
        - "[x] `(UseCase)` `CollectWindDataUsecase`に、日次処理で生成された`WindDataRecord`（正常データおよびスキップデータ）を蓄積するためのインスタンス変数（リスト `all_wind_data_records`）を実装した。"
        - "[x] `(UseCase)` `CollectWindDataUsecase`に、`_create_skipped_day_records`メソッドを実装し、指定された日付に対して10分毎のタイムスタンプ（00:10～24:00の計144件）を持つ欠損`WindDataRecord`のリストを生成するようにした。"
        - "[x] `(UseCase)` `CollectWindDataUsecase.execute`メソッド内で、HTML取得エラー (`HtmlFetchingError`)、HTML解析エラー (`HtmlParsingError`)、またはその他の予期せぬ例外が発生した場合に、`_create_skipped_day_records`を呼び出してスキップ日データを生成し、リストに追加して処理を継続するエラーハンドリングを実装した。"
        - "[x] `(UseCase)` `CollectWindDataUsecase.execute`メソッドの最後に、蓄積された`all_wind_data_records`リストを`WindDataRecord.observed_at`属性をキーとして昇順にソートする処理を実装した。"
        - "[x] `(UseCase)` `CollectWindDataUsecase`のコンストラクタを修正し、依存コンポーネント (`IWindDataParser`, `IJmaPageFetcher`, `IUrlBuilder`, `logger`) を依存性注入（DI）で受け取るようにした。"
        - "[x] `(UseCase)` 不要となったスタブメソッド `_fetch_and_process_daily_data_stub` を削除した。"
        - "[x] `(Test)` `tests/test_collect_wind_data_usecase.py` を更新し、`CollectWindDataUsecase`のデータ統合・ソート・スキップ処理（正常系、各種エラー発生時のスキップデータ生成、複数日混在時のソート）を検証する単体テストを拡充・修正した。"
      acceptance_criteria:
        - "AC-009-01: 複数日にまたがるデータが、観測日時の昇順に正しくソートされて統合される。"
        - "AC-009-02: データ取得や解析エラーでスキップされた日のデータは、CSV上では日付・時刻列のみが記録され、他の風況データ項目は空欄（または指定の欠損値表現）として統合される。"
      related_requirement: "US-009 (参照元: FR-005-01, UC-001)"
      dependencies:
        - "US-007_Issue"
        - "US-008_Issue"
      milestone: "M3"
      labels:
        - "type:user-story"
        - "epic:EPIC-04"
        - "feature:data-aggregation"
        - "layer:usecase"
        - "layer:domain"
        - "priority:medium"
        - "TDD"
      notes: null

    - id: "US-010_Issue"
      title: "[UserStory] 統合データのCSVファイル出力 (US-010)"
      description: |
        ユーザーストーリー US-010 を実装する。
        > データ利用者として、処理・統合された風況データをUTF-8エンコーディングのCSVファイルとして出力してほしい。それは、様々な分析ツールで容易に利用できる標準的な形式だからだ。
      implementation_tasks:
        - "[x] `(Port)` `src/usecases/ports/wind_data_output_port.py` に、ファイル出力インターフェース `IWindDataOutputPort` とカスタム例外 `FileOutputError` を定義した。"
        - "[x] `(Adapter-File)` `src/adapters/file/csv_output_adapter.py` に `CsvOutputAdapter` を実装。`pandas` を利用して `WindDataRecord` のリストをCSVに変換・出力するロジックを実装した。"
        - "[x] `(Adapter-File)` `CsvOutputAdapter` に、UTF-8エンコーディング (`utf-8-sig`) 指定、英語ヘッダー定義、欠損値 (-1.0) の空欄 (`None`経由) 出力、デフォルトパス生成、同名ファイル存在時の別名保存 (`filename(1).csv` 形式) ロジックを実装した。"
        - "[x] `(Adapter-File)` `CsvOutputAdapter` の `save` メソッドに、`IOError` や `PermissionError` を捕捉し `FileOutputError` を送出するエラーハンドリングを実装した。"
        - "[x] `(UseCase)` `CollectWindDataInput` DTOに `output_path: str | None` フィールドを追加した。"
        - "[x] `(UseCase)` `CollectWindDataUsecase` のコンストラクタを修正し `IWindDataOutputPort` を受け取るようにし、`execute` メソッド内でファイル保存処理を呼び出し、保存パスを返すようにした。"
        - "[x] `(Adapter-CUI)` `src/adapters/cui/argument_parser.py` に `--output` オプションを追加した。"
        - "[x] `(Adapter-CUI)` `main.py` を修正し、`CsvOutputAdapter` を注入し、`FileOutputError` を捕捉してCUI/ログにエラー出力するようにした。"
        - "[x] `(Test)` `tests/adapters/file/test_csv_output_adapter.py` に、`CsvOutputAdapter` の主要機能（正常系、欠損値、別名保存、エラーハンドリング）を検証する単体テストを実装した。"
        - "[x] `(Test)` `tests/test_collect_wind_data_usecase.py` と `tests/test_collect_wind_data_usecase_port.py` を更新し、ファイル出力ポートのモック利用と関連ログの検証を追加・改善した。"
      acceptance_criteria:
        - "AC-010-01: 統合データが、指定された（またはデフォルトの）ファイルパスにCSVファイルとして保存される。"
        - "AC-010-02: CSVファイルの文字エンコーディングはUTF-8である。"
        - "AC-010-03: CSVファイルの1行目には、定義された英語のヘッダー行が出力される。"
        - "AC-010-04: 各データ行は、観測日時、平均風向（数値）、平均風速、最大瞬間風速の風向（数値）、最大瞬間風速の順でカンマ区切りで出力される。"
        - "AC-010-05: スキップされた日のデータは、CSV上で日付・時刻列は記録され、他の風況データ項目は空欄で出力される。"
        - "AC-010-06: 出力先に同名のCSVファイルが既に存在する場合、ファイル名の末尾に連番を付与するなどの方法で別名 (`filename(1).csv`など) で保存される。"
        - "AC-010-07: ファイル書き込み権限がない場合やディスク容量不足の場合、適切なエラーメッセージがCUIに表示され、処理は終了する。エラーはログにも記録される。"
      related_requirement: "US-010 (参照元: FR-006-01~05, UC-001)"
      dependencies:
        - "US-009_Issue"
        - "TASK-004_Issue"
      milestone: "M3"
      labels:
        - "type:user-story"
        - "epic:EPIC-04"
        - "feature:csv-output"
        - "layer:adapter-file"
        - "layer:usecase"
        - "priority:high"
        - "TDD"
      notes: null

    - id: "US-011_Issue"
      title: "[UserStory] CUIでの処理進捗表示 (US-011)"
      description: |
        ユーザーストーリー US-011 を実装する。
        > データ利用者として、長時間のデータ取得・処理中に、現在の処理状況（処理中の日付と残り日数）をCUIで確認したい。それは、処理がどの程度進んでいるか把握し、安心して待つためだ。
      implementation_tasks:
        - "[ ] `(Adapter-CUI/UseCase)` 処理の主要なステップ（開始、日次処理ごと、完了）でCUIにメッセージを出力するロジックを実装する"
        - "[ ] `(UseCase)` 現在処理中の日付と総日数から残り日数を計算するロジックを実装する"
        - "[ ] `(Adapter-CUI)` CUI表示のフォーマットを決定し、実装する（例: `Processing YYYY-MM-DD (Day X of Y, Z days remaining)...`）"
        - "[ ] `(Test)` 進捗表示ロジックのテスト（表示内容、更新タイミング）を作成する"
      acceptance_criteria:
        - "AC-011-01: システム起動後、処理開始を示すメッセージがCUIに表示される。"
        - "AC-011-02: 1日分のデータ処理が完了するごとに、現在処理中の日付と、総日数のうち残りの日数がCUIに表示され、情報が更新される。"
        - "AC-011-03: 全ての処理が完了後、処理完了を示すメッセージと出力されたCSVファイルパスがCUIに表示される。"
      related_requirement: "US-011 (参照元: FR-007-01, FR-007-02, FR-007-03)"
      dependencies:
        - "US-001_Issue" # 処理全体のフローに組み込む
      milestone: "M4"
      labels:
        - "type:user-story"
        - "epic:EPIC-05"
        - "feature:progress-display"
        - "layer:adapter-cui"
        - "layer:usecase"
        - "priority:medium"
      notes: null

    - id: "US-012_Issue"
      title: "[UserStory] エラー発生時のCUI通知とログ確認促進 (US-012)"
      description: |
        ユーザーストーリー US-012 を実装する。
        > データ利用者として、処理中にエラーが発生した場合、その旨をCUIで把握し、さらに詳細なエラー情報をログファイルで確認したい。それは、問題の原因を特定し、必要に応じて再実行や開発者へのフィードバックを行うためだ。
      implementation_tasks:
        - "[ ] `(UseCase/Adapter-CUI)` 各種エラー発生箇所で、概要を示すエラーメッセージをCUIに出力する処理を実装する"
        - "[ ] `(UseCase/Adapter-File)` エラー発生時に詳細情報（日時、エラー内容、対象日など）をログファイルに記録する処理を確実にする (TASK-004_Issueと連携)"
        - "[ ] `(UseCase/Adapter-CUI)` 処理完了時に、エラーログの有無を確認し、エラーがあった場合にログファイルの確認を促すメッセージをCUIに表示する処理を実装する"
        - "[ ] `(Test)` エラー発生時のCUIメッセージとログ確認促進メッセージの表示を検証するテストを作成する"
      acceptance_criteria:
        - "AC-012-01: HTML取得エラー、HTML解析エラー、CSV出力エラーなどが発生した場合、概要を示すエラーメッセージがCUIに表示される。"
        - "AC-012-02: 発生したエラーの詳細（日時、エラー内容、対象日など）がログファイルに記録される。"
        - "AC-012-03: 処理完了時に、エラーが1件以上ログに記録されていた場合、ログファイルの確認を促すメッセージがCUIに表示される（エラーがなければ表示されない）。"
      related_requirement: "US-012 (参照元: FR-007-04, FR-008-01)"
      dependencies:
        - "TASK-004_Issue"
      milestone: "M4"
      labels:
        - "type:user-story"
        - "epic:EPIC-05"
        - "feature:logging"
        - "feature:error-handling"
        - "layer:adapter-cui"
        - "layer:adapter-file"
        - "layer:usecase"
        - "priority:medium"
      notes: null

  technical_tasks:
    - id: "TASK-001_Issue"
      title: "[TechnicalTask] コマンドライン引数解析基盤の実装 (TASK-001)"
      description: |
        Pythonの `argparse` ライブラリ（または同等のもの）を導入し、コマンドライン引数・オプションを定義・解析するための基本的な枠組みをセットアップする。
        これは US-001, US-002, US-003 の基盤となる。
      implementation_tasks:
        - "[x] `(Infrastructure/Adapter-CUI)` `argparse` を用いた引数パーサーの初期化"
        - "[x] `(Infrastructure/Adapter-CUI)` 引数定義の基本的な構造作成（後でUSごとに引数を追加）"
        - "[x] `(Test)` 基本的なパーサーの動作確認テスト"
      acceptance_criteria:
        - "`argparse` がプロジェクトに導入され、基本的な引数なしでの実行や、存在しないオプション指定時の標準エラー出力が機能すること。"
        - "今後の引数追加が容易な構造であること。"
      related_requirement: "TASK-001 (参照元: FR-001, NFR-013)"
      dependencies: null
      milestone: "M1"
      labels:
        - "type:technical-task"
        - "epic:EPIC-01"
        - "layer:adapter-cui"
        - "layer:infrastructure"
        - "priority:high"
      notes: |
        [申し送り事項]
        - US-001, US-002, US-003の実装者へ: 引数の追加は `src/app/adapters/cui/argument_parser.py` に `parser.add_argument(...)` を追記して行います。
        - TASK-004 (ロギング基盤) の実装者へ: `main.py` のエラー処理部にある `print()` は、将来的にロガー呼び出しに置き換えてください。

    - id: "TASK-002_Issue"
      title: "[TechnicalTask] HTML解析ライブラリの選定と導入 (TASK-002)"
      description: |
        技術タスク TASK-002 を実施する。
        > システムとして、気象庁HTMLデータの解析に最適なライブラリを選定・導入したい。それは、安定したデータ抽出と保守性の高い実装を実現するためだ。
      implementation_tasks:
        - "[x] `(Infrastructure/Adapter-Web)` 候補ライブラリ(`pandas.read_html`, `Beautiful Soup`)の機能比較、サンプルHTML(`tests/resources/sample_jma.html`)でのPoCを実施"
        - "[x] `(Infrastructure/Adapter-Web)` PoC結果に基づき、`pandas` と `BeautifulSoup` を併用するアプローチを選定し、依存関係(`requirements.in`)に `pandas`, `lxml`, `beautifulsoup4` を追加"
        - "[x] `(Documentation)` 選定理由、PoC結果、推奨される基本的な使い方を技術選定報告ドキュメントとして作成"
      acceptance_criteria:
        - "AC-TASK-002-01: HTML解析ライブラリの選定理由が明文化されている。"
        - "AC-TASK-002-02: 選定したライブラリがプロジェクトに導入されている。"
        - "AC-TASK-002-03: サンプルHTMLでのデータ抽出PoC結果が記録されている。"
      related_requirement: "TASK-002 (参照元: FR-003-01, 技術的制約)"
      dependencies: []
      milestone: "M1"
      labels:
        - "type:technical-task"
        - "epic:EPIC-01"
        - "feature:html-parsing"
        - "layer:infrastructure"
        - "layer:adapter-web"
        - "priority:high"
        - "TDD"
      notes: null

    - id: "TASK-003_Issue"
      title: "[TechnicalTask] Docker環境構築 (TASK-003)"
      description: |
        Python実行環境と必要な依存モジュールを含むDockerfileを作成し、Dockerイメージをビルド可能にする。
        開発環境と実行環境の差異をなくし、デプロイを容易にする。
        依存関係は `pip-tools` を用いて `requirements.in/txt` で管理する。
      implementation_tasks:
        - "[x] `(Infrastructure)` ベースとなるPythonのDockerイメージを選定 (`python:3.10-slim`)"
        - "[x] `(Infrastructure)` `requirements.txt` 等で依存モジュールを管理し、Dockerfile内で `pip install` するように記述 (`pip-tools`を導入)"
        - "[x] `(Infrastructure)` スクリプト実行のためのエントリーポイントや作業ディレクトリを設定"
        - "[x] `(Test/Documentation)` Dockerイメージのビルドとコンテナ実行手順を検証・ドキュメント化 (検証スクリプト `.build/check_container_env.sh` を作成)"
      acceptance_criteria:
        - "`docker build` コマンドでイメージが正常にビルドできること。"
        - "ビルドされたイメージからコンテナを起動し、サンプルスクリプト（または本システムの一部）が実行できること。"
      related_requirement: "TASK-003 (参照元: 技術的制約, NFR-016)"
      dependencies: null # (初期段階から着手し、継続的に改善)
      milestone: "M5" # (初期段階から着手し、継続的に改善)
      labels:
        - "type:technical-task"
        - "epic:EPIC-06"
        - "layer:infrastructure"
        - "docker"
        - "priority:medium"
      notes: null

    - id: "TASK-004_Issue"
      title: "[TechnicalTask] ロギング基盤の実装 (TASK-004)"
      description: |
        Pythonの `logging` モジュール等を利用して、柔軟なロギング機能を実装する。
        ログレベル設定、フォーマット、ファイル出力（実行ファイルやCSVと同じ場所）、エラー発生時の情報記録を確実に行う。
      implementation_tasks:
        - "[x] `(Infrastructure/Adapter-File)` ロギング設定関数(`setup_logging`)を実装し、フォーマッタとハンドラ（コンソール、ファイル）を設定"
        - "[x] `(Infrastructure)` ログレベル（DEBUG, INFO, WARNING, ERROR, CRITICAL）を定義し、コマンドライン引数 `--loglevel` で設定可能にするインターフェースを実装"
        - "[x] `(Infrastructure/Adapter-File)` ログファイルをカレントディレクトリに固定ファイル名(`wind-research.log`)で出力する仕様を実装"
        - "[x] `(UseCase)` 各モジュールが `logging.getLogger(__name__)` を通じて設定済みロガーを取得できる標準的な方法を提供"
        - "[x] `(Test)` ログレベル設定、ファイルへのログ出力、スタックトレースの記録を含むユニットテストを実装"
      acceptance_criteria:
        - "INFOレベル以上のログが指定されたファイルに記録されること。"
        - "コマンドラインオプションでDEBUGレベルのログが出力されるよう変更できること。"
        - "エラー発生時に、スタックトレースを含む詳細な情報がERRORレベルで記録されること。"
        - "ログローテーションは初期スコープ外。"
      related_requirement: "TASK-004 (参照元: FR-008, NFR-015)"
      dependencies:
        - "US-001_Issue" # (コマンドラインオプション)
      milestone: "M4" # (ただし、エラーハンドリングのため早期に必要)
      labels:
        - "type:technical-task"
        - "epic:EPIC-05"
        - "feature:logging"
        - "layer:adapter-file"
        - "layer:infrastructure"
        - "priority:high"
      notes: "ログローテーション機能（FR-008-03検討）は初期リリースでは見送り、必要に応じて別タスクとする。"

    - id: "TASK-005_Issue"
      title: "[TechnicalTask] ドメインモデルクラス実装 (TASK-005)"
      description: |
        要件定義書で定義されたドメインモデル（`WindDataRecord`, `DailyWindReport`, 各ValueObjectなど）のPythonクラスを実装する。
        不変性、バリデーションロジック、等価性比較などを適切に実装する。TDDで進める。
      implementation_tasks:
        - "[x] `(Domain)` 不変な値オブジェクト `ObservationPointValue` と `DateTimeRangeValue` を自己検証ロジックと共に実装"
        - "[x] `(Domain)` `from_text` ファクトリメソッドを持つ不変な値オブジェクト `WindDirectionValue` と `WindSpeedValue` を実装"
        - "[x] `(Domain)` UUIDを識別子として持つ `WindDataRecord` エンティティを実装"
        - "[x] `(Domain)` `DailyWindReport` を集約ルートとして実装し、`WindDataRecord` の生成と追加ロジックをカプセル化"
        - "[x] `(Domain)` `DailyWindReport` にビジネスルール（レコード数の上限が144件）を実装し、テストで検証"
        - "[x] `(Test)` 上記すべてのドメインモデルに対し、不変性・等価性・バリデーション・ビジネスルールを網羅する単体テストを実装"
      acceptance_criteria:
        - "各クラスがドメインモデル定義に従って属性と振る舞いを持つ。"
        - "ValueObjectは不変であり、内容に基づいた等価性比較が実装されている。"
        - "Entityは識別子を持ち、状態変更のロジックが適切にカプセル化されている。"
        - "全てのユニットテストが成功する。"
      related_requirement: "TASK-005 (参照元: ドメインモデル_初期案)"
      dependencies: null
      milestone: "M2"
      labels:
        - "type:technical-task"
        - "epic:EPIC-03"
        - "layer:domain"
        - "ddd:domain-modeling"
        - "ddd:aggregate"
        - "ddd:value-object"
        - "priority:high"
        - "TDD"
      notes: "TDDで開"

    - id: "TASK-006_Issue"
      title: "[TechnicalTask] 風向・風速変換ドメインサービス実装 (TASK-006)"
      description: |
        `WindDataConverterService` を実装し、文字列形式の風向・風速データをドメインモデルの `WindDirectionValue` および `WindSpeedValue` オブジェクトに変換するロジックを提供する。
      implementation_tasks:
        - "[x] `(Domain)` `domain/services/wind_data_converter.py` に `WindDataConverterService` クラスを実装"
        - "[x] `(Domain)` 風向変換ロジックを実装。16方位・静穏・欠損値（///）を、辞書マップを用いて定義済みの角度(float)に変換する"
        - "[x] `(Domain)` 風速変換ロジックを実装。変換不可能な文字列（非数値、None）はフォールバック値 -1.0 として処理する"
        - "[x] `(Test)` `test_wind_data_converter.py` に、正常系・境界値・異常系を網羅する単体テストを実装し、全件PASSを確認"
      acceptance_criteria:
        - "文字列の風向・風速が、定義された変換ルールに従って正しく対応するValueObjectに変換される。"
        - "不正な入力や未定義の入力に対するフォールバック処理（例: -1.0設定、ログ記録）が機能する。"
        - "全てのユニットテストが成功する。"
      related_requirement: "TASK-006 (参照元: ドメインモデル_初期案, FR-004)"
      dependencies:
        - "TASK-005_Issue"
      milestone: "M2"
      labels:
        - "type:technical-task"
        - "epic:EPIC-03"
        - "layer:domain"
        - "ddd:domain-service"
        - "priority:high"
        - "TDD"
      notes: "16方位のマッピングテーブルなど、設定データはコード内に持つか、読みやすい形で管理する。"

    - id: "TASK-007_Issue"
      title: "[TechnicalTask] 性能検証の実施 (TASK-007)"
      description: |
        1年分のデータ取得・処理の性能を検証する。処理時間を計測し、ボトルネックがあれば特定する。
        スタックしないこと（タイムアウト機構の検討含む）も確認する。
      implementation_tasks:
        - "[ ] `(Test/Infrastructure)` 性能検証用のテストデータセット（または実データでの実行手順）準備"
        - "[ ] `(Test/Infrastructure)` 処理時間計測スクリプトまたはツールの準備"
        - "[ ] `(Test/Infrastructure)` 1年分のデータ処理を実行し、全体の処理時間と日毎の処理時間を記録"
        - "[ ] `(Test/Infrastructure)` 1日分の処理に対するタイムアウト機構の検討と、必要であれば簡易的な実装・テスト"
        - "[ ] `(Documentation)` 検証結果とボトルネック分析、改善提案をまとめる"
      acceptance_criteria:
        - "1年分のデータ処理が「現実的な時間内」で完了する（具体的な目標値はPOと協議）。"
        - "特定の日の処理で異常に長時間スタックしない。タイムアウト機構が機能し、エラーとしてスキップ処理に移行できること。"
        - "ボトルネックがあれば特定され、改善の方向性が示される。"
      related_requirement: "TASK-007 (参照元: NFR-001)"
      dependencies: # 主要な機能がほぼ実装完了後
        - "US-010_Issue"
      milestone: "M5"
      labels:
        - "type:technical-task"
        - "epic:EPIC-06"
        - "type:test"
        - "layer:usecase"
        - "layer:adapter-web"
        - "layer:infrastructure"
        - "priority:medium"
      notes: null

    - id: "TASK-008_Issue"
      title: "[TechnicalTask] 気象庁利用規約・robots.txt確認 (TASK-008)"
      description: |
        気象庁ウェブサイトの利用規約および `robots.txt` を確認し、本システムがこれらを遵守している設計であることを確認する。
      implementation_tasks:
        - "[ ] `(Documentation/Chore)` 気象庁の関連ページを調査"
        - "[ ] `(Documentation/Chore)` `robots.txt` を確認し、アクセス制限があればシステム設計に反映（特にスクレイピング対象パス）"
        - "[ ] `(Documentation/Chore)` 確認結果と、システムが規約を遵守するための注意点を開発チーム内で共有"
      acceptance_criteria:
        - "利用規約と `robots.txt` の内容が確認され、システム設計への影響が評価されること。"
        - "遵守事項があれば開発チームに周知されること。"
      related_requirement: "TASK-008 (参照元: 制約条件, NFR-005)"
      dependencies: null
      milestone: "M2" # (開発初期に実施)
      labels:
        - "type:technical-task"
        - "epic:EPIC-02"
        - "epic:EPIC-06"
        - "type:chore"
        - "layer:adapter-web"
        - "priority:high"
      notes: "開発初期に実施。"

    - id: "TASK-009_Issue"
      title: "[TechnicalTask] 包括的なテスト戦略と実装 (TASK-009) - メタIssue"
      description: |
        ユニットテスト、結合テスト、受け入れテスト（E2E）を含む包括的なテスト戦略を策定し、主要なテストケースを実装する。
        TDDの原則に従い、カバレッジ向上を目指す。
        **このIssueはメタIssueとし、具体的なテスト実装はサブタスクIssueとして作成・管理する。**
      implementation_tasks:
        - "[ ] テスト戦略ドキュメントの作成（テストの種類、範囲、ツール、カバレッジ目標など）"
        - "[ ] ユニットテスト実装 (詳細はサブタスクIssueへ)"
        - "[ ] 結合テスト実装 (詳細はサブタスクIssueへ)"
        - "[ ] E2Eテスト実装 (詳細はサブタスクIssueへ)"
        - "[ ] CI環境でのテスト自動実行設定"
      acceptance_criteria:
        - "テスト戦略が定義され、チームで合意されていること。"
        - "定義されたテストが実装され、CIで実行されていること。"
        - "テストカバレッジが目標値を満たしていること。"
      related_requirement: "TASK-009 (参照元: NFR-010, NFR-011, NFR-012)"
      dependencies: null # 各機能の実装に依存
      milestone: "M5" # (各機能開発と並行して進める)
      labels:
        - "type:technical-task"
        - "epic:EPIC-06"
        - "type:test"
        - "priority:high"
        - "TDD"
      notes: "[分割必須] このIssueはテスト全体の計画と管理。具体的なテスト実装は、例えば TASK-009-Unit-Domain, TASK-009-Integration-Pipeline のように個別のIssueを作成する。"

    - id: "DISC-001_Issue"
      title: "[Discussion] CSV空欄表現の具体化"
      description: |
        「補足_確認_検討事項」のNo.1より。
        エラーでスキップされた日のデータ項目をCSVファイル上で「空欄」と表現する際の具体的な方法を決定する。
      implementation_tasks:
        - "[ ] `,,` のように値がない状態とするか、`\"\"` のように空文字列を明示的に入れるか、`NaN` や `-1` (既存の欠損値と同じ) を使うかなどを検討。"
        - "[ ] Pandas等、使用するCSV書き出しライブラリのデフォルト挙動を確認。"
        - "[ ] データ利用者が最も扱いやすい形式を選択する。"
      acceptance_criteria:
        - "CSVの空欄表現の仕様が明確に定義されること。"
        - "US-010_Issue (CSV出力) の実装に反映されること。"
      related_requirement: "補足1"
      dependencies: null
      milestone: "M3"
      labels:
        - "type:discussion"
        - "epic:EPIC-04"
        - "feature:csv-output"
        - "needs-discussion"
        - "priority:medium"
      notes: null

    - id: "DISC-002_Issue"
      title: "[Discussion] CSV別名保存の命名規則決定"
      description: |
        「補足_確認_検討事項」のNo.2より。
        同名のCSVファイルが既に存在する場合の「別名で保存」の具体的な命名規則を決定する。
      implementation_tasks:
        - "[ ] `filename(1).csv`, `filename(2).csv` のような連番方式で良いか検討。"
        - "[ ] タイムスタンプを付与する方式（例: `filename_YYYYMMDDHHMMSS.csv`）も比較検討。"
        - "[ ] 実装の容易性とユーザーの分かりやすさを考慮して決定する。"
      acceptance_criteria:
        - "別名保存時の命名規則が明確に定義されること。"
        - "US-010_Issue (CSV出力) の実装に反映されること。"
      related_requirement: "補足2"
      dependencies: null
      milestone: "M3"
      labels:
        - "type:discussion"
        - "epic:EPIC-04"
        - "feature:csv-output"
        - "needs-discussion"
        - "priority:medium"
      notes: null

    - id: "DISC-003_Issue"
      title: "[Discussion] 1日分処理のスタック時タイムアウト値検討"
      description: |
        「補足_確認_検討事項」のNo.3より。
        非機能要件NFR-001における「スタックしたと判断される場合（例: タイムアウト設定）」の具体的なタイムアウト値を検討する。
      implementation_tasks:
        - "[ ] 1日分のHTML取得と解析にかかる通常の時間を概算。"
        - "[ ] ネットワーク遅延なども考慮し、現実的なタイムアウト値を設定（例: 5分、10分など）。"
        - "[ ] タイムアウト発生時のログ内容、ユーザーへの通知方法も併せて検討。"
      acceptance_criteria:
        - "1日分の処理に対するタイムアウト値の目安が設定されること。"
        - "NFR-001 (性能) の実装・検証に反映されること。"
      related_requirement: "補足3"
      dependencies: null
      milestone: "M5"
      labels:
        - "type:discussion"
        - "epic:EPIC-06"
        - "feature:error-handling"
        - "needs-discussion"
        - "priority:medium"
      notes: null

    - id: "DISC-004_Issue"
      title: "[Discussion] ログレベル設定方法の具体化"
      description: |
        「補足_確認_検討事項」のNo.4より。
        機能要件FR-008-02「ログレベル設定可能」の具体的な設定方法を決定する。
      implementation_tasks:
        - "[ ] コマンドラインオプション（例: `--loglevel DEBUG`）で指定する方式で良いか確認。"
        - "[ ] 対応するログレベルの名称（DEBUG, INFO, WARNING, ERRORなど）を定義。"
      acceptance_criteria:
        - "ログレベルの設定方法が明確に定義されること。"
        - "TASK-004_Issue (ロギング基盤実装) に反映されること。"
      related_requirement: "補足4"
      dependencies: null
      milestone: "M4"
      labels:
        - "type:discussion"
        - "epic:EPIC-05"
        - "feature:logging"
        - "needs-discussion"
        - "priority:low"
      notes: null

    - id: "DISC-005_Issue"
      title: "[Discussion] HTML構造変更時のエラーメッセージ具体化"
      description: |
        「補足_確認_検討事項」のNo.5より。
        HTML構造変更でデータ抽出に失敗した場合にユーザーに表示するCUIおよびログのメッセージ内容を具体的にする。
      implementation_tasks:
        - "[ ] ユーザーが原因を推測しやすく、かつ開発者がデバッグしやすい情報を含むメッセージ案を作成。"
        - "  (例: `エラー: [YYYY-MM-DD]のデータ抽出に失敗しました。気象庁サイトのページ構成が変更された可能性があります。詳細はログファイル [ログファイルパス] をご確認ください。`)"
        - "[ ] ログには、どの要素が見つからなかったかなど、より技術的な詳細を含めることを検討。"
      acceptance_criteria:
        - "HTML構造変更に起因するデータ抽出失敗時のエラーメッセージ（CUI/ログ）のテンプレートが定義されること。"
        - "US-006_Issue (HTML抽出)、US-012_Issue (エラー通知) の実装に反映されること。"
      related_requirement: "補足5"
      dependencies: null
      milestone: "M4"
      labels:
        - "type:discussion"
        - "epic:EPIC-02"
        - "epic:EPIC-05"
        - "feature:error-handling"
        - "needs-discussion"
        - "priority:medium"
      notes: null

    - id: "TASK-ATTRIBUTION-DOC-01_Issue"
      title: "[TechnicalTask][Documentation] データ利用時の推奨出典表記をREADME等に記載 (TASK-ATTRIBUTION-DOC-01)"
      description: |
        気象庁データの利用規約に基づき、適切な出典表記方法をユーザー向けドキュメントに記載する。
      implementation_tasks:
        - "[ ] `README.md`または`USAGE.md`に出典表記例を記載する。"
      acceptance_criteria:
        - "README等に出典表記が明記されている。"
      related_requirement: "TASK-008, US-010"
      dependencies: []
      milestone: "M3"
      labels:
        - "type:documentation"
        - "epic:EPIC-04"
        - "priority:medium"

    - id: "TASK-JMA-LAW-DOC-01_Issue"
      title: "[TechnicalTask][Documentation] システムの制約事項として気象業務法に関する注意点を開発者ドキュメントに記載 (TASK-JMA-LAW-DOC-01)"
      description: |
        将来的な機能拡張に備え、気象業務法に関する留意点を開発者向けドキュメントに記載する。
      implementation_tasks:
        - "[ ] `COMPLIANCE.md`等に気象業務法の注意点を記載する。"
      acceptance_criteria:
        - "開発者ドキュメントに注意点が明記されている。"
      related_requirement: "TASK-008"
      dependencies: []
      milestone: "M3"
      labels:
        - "type:documentation"
        - "epic:EPIC-06"
        - "priority:medium"

    - id: "TASK-THROTTLE-01-FINAL_Issue"
      title: "[TechnicalTask] リクエストスロットリング機構の実装（ポリシー準拠）(TASK-THROTTLE-01-FINAL)"
      description: |
        `adapter-web`レイヤーに、気象庁の警告文と一般的なエチケットを遵守するためのリクエストスロットリング（アクセス間隔制御）機構を実装する。
      implementation_tasks:
        - "[x] `TASK-ACCESS-POLICY-01`で決定されたドメインごとの最小アクセス間隔を強制する機能を実装する。"
        - "[x] ユーザーが指定したアクセス間隔が、システムで定義された最小値を下回る場合は、システム最小値を優先して適用するロジックを組み込む。"
        - "[x] 同一ドメインへのリクエストが並列実行されないようにする（逐次処理を保証する）。"
        - "[x] (TDD) 指定された間隔が守られることを検証するユニットテストを作成する（時間を扱うテストには注意を払う）。"
      acceptance_criteria:
        - "`data.jma.go.jp`へのリクエストは、`TASK-ACCESS-POLICY-01`で定義された最小間隔（例: 8秒）以上を空けて実行されること。"
        - "ユーザーが最小値より短い間隔（例: 3秒）を指定しても、システムの最小値が強制されること。"
        - "関連するユニットテストがすべて成功すること。"
      related_requirement: "TASK-ACCESS-POLICY-01, US-002, US-005"
      dependencies: []
      milestone: "M2"
      labels:
        - "type:technical-task"
        - "epic:EPIC-02"
        - "layer:adapter-web"
        - "layer:infrastructure"
        - "priority:high"

    - id: "TASK-UA-01_Issue"
      title: "[TechnicalTask] HTTPクライアントへのカスタムUser-Agent設定 (TASK-UA-01)"
      description: |
        `TASK-ACCESS-POLICY-01`で決定されたUser-Agent文字列を、気象庁ドメインへのすべてのHTTPリクエストに適用する。これにより、我々のシステムのアクセスであることを気象庁側が識別できるようになる。
      implementation_tasks:
        - "[x] `(Infrastructure)` `config.py` に `USER_AGENT` 定数を定義"
        - "[x] `(Adapter-Web)` `requests.Session` を用いてカスタムUser-Agentを設定する `JmaHttpClient` クラスを実装"
        - "[x] `(Test)` `requests-mock` を利用し、リクエストヘッダーに正しいUser-Agentが含まれることを検証する単体テストを実装"
      acceptance_criteria:
        - "気象庁サイトへのHTTPリクエストのヘッダーに、`TASK-ACCESS-POLICY-01`で定義されたUser-Agentが正確に含まれていること。"
        - "関連するユニットテストがすべて成功すること。"
      related_requirement: "TASK-ACCESS-POLICY-01"
      dependencies: []
      milestone: "M2"
      labels:
        - "type:technical-task"
        - "epic:EPIC-02"
        - "layer:adapter-web"
        - "layer:infrastructure"
        - "priority:high"

    - id: "TASK-ACCESS-POLICY-01_Issue"
      title: "[TechnicalTask][POLICY] JMAアクセス指針の策定と文書化 (TASK-ACCESS-POLICY-01)"
      description: |
        `TASK-008`の調査報告書、および`robots.txt`が存在しないという確定情報に基づき、本システムが気象庁ウェブサイトへアクセスする際の明確な技術的・倫理的指針を策定し、開発ドキュメントとして恒久的に記録する。
        この指針は、`adapter-web`レイヤーの実装における全ての前提条件となる。
      implementation_tasks:
        - "[x] チームミーティング（または非同期議論）を設定し、User-Agent・最小アクセス間隔・エラーハンドリング・アクセス対象パス原則を正式決定"
        - "[x] 決定したアクセス指針を開発ドキュメント（例: docs/COMPLIANCE.md）に明記"
        - "[x] 開発チーム全員でレビュー・承認"
        - "[x] 関連GitHub Issues・要件定義書へ反映（US-002, US-005, FR-002, NFR-002, NFR-017, スコープ・制約等）"
        - "[x] 実装用の新規技術タスク（TASK-UA-01, TASK-THROTTLE-01-FINAL等）を起票"
      acceptance_criteria:
        - "[x] User-Agentの具体的な文字列が決定され、文書化されている"
        - "[x] 各関連ドメインに対するシステム内部の最小アクセス間隔が明確に定義され、文書化されている"
        - "[x] 上記指針が開発チームに周知徹底され、開発ドキュメントとしてマージされている"
      notes: |
        JMAアクセス指針（User-Agent: WindResearcher/1.0, data.jma.go.jp:8秒, www.jma.go.jp:3秒, エラー時は全体停止）を策定・文書化し、関連成果物へ反映済み。チームレビュー・承認も完了。本Issueはクローズ。

    - id: BUG-001 # (仮のID、実際のIDはGitHubで採番)
      title: "[Bug][Adapter-Web] JMAデータ取得URLの不備とそれに伴うHTML解析エラー"
      description: |
        実際にCUIツールを実行したところ、特定のパラメータ（prec_no=51, block_no=1638）で、期待されるJMAのデータページとは異なるURLにアクセスしており、その結果HTML解析エラーが発生しデータが取得できない。

        **再現時のエラーログ:**
        ```
        root@2f539442aaa6:/app# python main.py --prefecture_no 51 --block_no 1638 --start_date 2024-01-01 --days 1
        2025-05-28 09:37:24,725 - __main__ - INFO - データ収集中...: 51, 1638, from 2024-01-01 for 1 days, interval: 5.0s
        2025-05-28 09:37:24,726 - __main__ - INFO - 2024-01-01 のデータ取得処理を開始します。URL: [https://www.data.jma.go.jp/stats/etrn/view/10min_s1.php?prec_no=51&block_no=1638&year=2024&month=01&day=01&view=p1](https://www.data.jma.go.jp/stats/etrn/view/10min_s1.php?prec_no=51&block_no=1638&year=2024&month=01&day=01&view=p1)
        2025-05-28 09:37:24,727 - src.adapters.web.jma_page_fetcher_adapter - INFO - Fetching HTML from: [https://www.data.jma.go.jp/stats/etrn/view/10min_s1.php?prec_no=51&block_no=1638&year=2024&month=01&day=01&view=p1](https://www.data.jma.go.jp/stats/etrn/view/10min_s1.php?prec_no=51&block_no=1638&year=2024&month=01&day=01&view=p1)
        2025-05-28 09:37:24,807 - __main__ - INFO - 2024-01-01 のHTML取得成功。
        2025-05-28 09:37:24,809 - __main__ - ERROR - 2024-01-01 のデータ解析をスキップします（HTML解析エラー）。理由: 目的のテーブル(id='tablefix1')が見つかりません。
        2025-05-28 09:37:24,811 - __main__ - INFO - 全てのデータ取得・処理が完了しました。
        2025-05-28 09:37:24,818 - __main__ - INFO - ファイル出力完了: wind_data_20240101.csv
        ```

        **ユーザー指摘の正しいと思われるURL:**
        `https://www.data.jma.go.jp/stats/etrn/view/10min_a1.php?prec_no=51&block_no=1638&year=2024&month=1&day=1&view=p1`

      problem_analysis: |
        - `JmaUrlBuilder` が `JMA_10MIN_DATA_URL_TEMPLATE` に基づいて生成しているURLが、特定のケース（または全てのケース）で正しくない可能性がある。
        - 現在のテンプレートでは、パスが `10min_s1.php` で、月日がゼロパディング (`month={month:02d}`, `day={day:02d}`) される。
        - 正しいURLではパスが `10min_a1.php` で、月日のゼロパディングがないように見える。
        - 結果として、誤ったURLにアクセスし、期待するHTML構造（`id='tablefix1'` を含むテーブル）が得られず、`JmaHtmlParser` がエラーを送出している。

      hypotheses:
        - "仮説1: `JMA_10MIN_DATA_URL_TEMPLATE` の定義が、全ての観測地点・日付に対して普遍的に正しいわけではなく、特定のパターン（例: `_a1.php` でゼロパディングなし）が存在する。"
        - "仮説2: 複数のURLパターンが存在し、観測地点や日付によって使い分ける必要があるかもしれない。"

      implementation_tasks:
        - section: "調査・検証"
          tasks:
            - description: "ユーザー指摘のURL (`.../10min_a1.php?...month=1&day=1...`) にブラウザでアクセスし、データテーブル (`id='tablefix1'` またはそれに類するもの) が存在するか、HTML構造が `sample_jma.html` と比較してどうなっているかを確認する。"
              completed: false
            - description: "もし上記URLでデータが取得できる場合、そのHTMLを `tests/resources/sample_jma_a1_format_51_1638.html` のような名前で保存する。"
              completed: false
            - description: "他の観測地点や日付でも同様に `_s1.php` と `_a1.php` (およびゼロパディングの有無) のパターンを試し、URL形式の法則性や、どちらがより一般的に正しい形式なのかを調査する。"
              completed: false
        - section: "実装 (`adapter-web` レイヤー)"
          tasks:
            - description: "(調査結果に基づき) `src/adapters/web/jma_config.py` の `JMA_10MIN_DATA_URL_TEMPLATE` を、より正しい、またはより汎用的な形式に修正する。必要であれば、URL生成ロジック (`JmaUrlBuilder`) 自体を修正し、複数のパターンに対応できるようにする。"
              completed: false
            - description: "上記のURLテンプレート/ロジック修正後、`JmaHtmlParser` の修正が必要か再検討する。正しいURLから取得したHTMLに `id='tablefix1'` が存在すれば、当初のパーサー修正（テーブルなしの場合に空リストを返す）は不要になる可能性がある。しかし、データが存在しない場合（正しいURLだがデータなしページ）のために、そのハンドリングは依然として有効かもしれない。"
              completed: false
        - section: "テスト (`adapter-web` レイヤー)"
          tasks:
            - description: "(TDD) `src/adapters/web/test_jma_url_builder.py` のテストケースを、修正されたURL生成ロジック/テンプレートに合わせて更新・追加する。正しいURLが生成されることを検証する。" #
              completed: false
            - description: "(TDD) `src/adapters/web/test_jma_html_parser.py` のテストケースを見直す。もしURL修正によって常に正しいHTMLが取得できるようになり、`id='tablefix1'` が存在しないケースが「データなし」ページの場合のみに限定されるなら、それに応じたテスト（例: `test_parse_html_with_no_tablefix1_returns_empty_list`）が適切であることを確認する。" #
              completed: false

      acceptance_criteria:
        - "再現手順のコマンドを実行した際、正しいと判断されたJMAのURLにアクセスし、データが取得できる場合はHTML解析エラーが発生せず、データが正常に処理されること。"
        - "正しいURLにアクセスしてもデータが存在しない場合（例: 気象庁側でデータ提供がない日）、アプリケーションはエラー終了せず、その日のデータは0件として処理され、`INFO` または `WARN` ログが出力されること。"
        - "最終的に生成されるCSVファイルが、取得できたデータに基づいて正しく作成される（データなしの場合はヘッダーのみ、または `No data to save.`）。"
        - "`test_jma_url_builder.py` の関連テストがすべて成功すること。"
        - "`test_jma_html_parser.py` の関連テストがすべて成功すること。"

      milestone: "MVPリリース"
      labels:
        - "type:bug"
        - "layer:adapter-web"
        - "feature:html-parsing"
        - "feature:url-generation" # 新規追加または既存のものを適用
        - "priority:high"
        - "TDD"
        - "needs-investigation" # 新規追加または既存のものを適用
      dependencies: []
      related_requirement: "FR-002-01 (URL動的生成), FR-003-04, FR-003-05 (HTML解析エラー時の処理)" #
      notes: |
        このエラーの根本原因は、HTMLパーサーだけでなく、その前段のURL生成ロジックにある可能性が高い。
        JMAサイトの正しいURL形式を特定し、`JMA_10MIN_DATA_URL_TEMPLATE` および `JmaUrlBuilder` を修正することが本Issueの主眼となる。
        その上で、`JmaHtmlParser` が「データなし」ページ（正しいURLだがテーブルがないケース）を適切に扱えることも保証する。

    - id: "DOC-001"
      title: "[Feature][Documentation] README.mdの全体的な整備と使用方法の追記"
      description: |
        基本的なデータ取得機能が実装され、CUIツールとして動作するようになったため、プロジェクトの顔である `README.md` を現状に合わせて更新する必要がある。
        現在のREADMEには、具体的な実行方法やコマンドラインオプションに関する説明が不足しており、新規参画者や利用者がツールを使い始めるのが困難な状態となっている。
        このIssueでは、READMEに必要な情報を網羅的に追記し、誰でも簡単にツールを試せる状態にすることを目的とする。
      owner: ""
      status: "Open"
      created_at: "2025-05-29" # JST
      updated_at: "2025-05-29" # JST
      epic: "EPIC-DOC" # ドキュメンテーション整備のエピックに関連付け
      user_story_reference: "" # 特定のユーザーストーリーには直接紐付かない
      acceptance_criteria:
        - "[ ] `README.md` に、プロジェクトの目的と主な機能が明確に記述されていること。"
        - "[ ] `README.md` に、ツールの実行に必要な環境（Dockerなど）と、そのセットアップ方法が記述されていること。"
        - "[ ] `README.md` の「使い方」セクションに、CUIツールを実行するための具体的なコマンドライン例が記述されていること。（例: 1日分のデータ取得、複数日のデータ取得）"
        - "[ ] `README.md` に、`--prefecture_no`, `--block_no`, `--start_date`, `--days`, `--output` といった全てのコマンドラインオプションに関する説明が記述されていること。"
        - "[ ] `README.md` に、出力されるCSVファイルのフォーマット例が記載されていること。"
        - "[ ] `README.md` に、データソースが気象庁であることを明記し、`docs/COMPLIANCE.md` で定義されている推奨出典表記が記載されていること。(`TASK-ATTRIBUTION-DOC-01` の成果を反映)"
        - "[ ] `README.md` から、他の関連ドキュメント（例: `docs/COMPLIANCE.md`）へのリンクが適切に設定されていること。"
      implementation_tasks:
        - "[ ] 現在の `README.md` の内容をレビューし、構成を検討する。"
        - "[ ] 「## 概要」セクションを更新し、プロジェクトの目的を明確化する。"
        - "[ ] 「## 主な機能」セクションを新たに追加し、データ収集、変換、CSV出力などの機能をリストアップする。"
        - "[ ] 「## 実行環境」セクションを新たに追加し、Dockerおよびdocker-composeを使用した環境構築手順を記述する。"
        - "[ ] 「## 使い方」セクションを更新し、基本的なコマンド実行例（1日分、複数日、出力ファイル指定など）を記述する。"
        - "[ ] 「## コマンドラインオプション」セクションを新たに追加し、`main.py` が受け付ける全ての引数について説明する表を作成する。"
        - "[ ] 「## 出力形式」セクションを新たに追加し、生成されるCSVファイルのヘッダーとデータ例を示す。"
        - "[ ] 「## データソースと出典表記」セクションを新たに追加し、気象庁からのデータを利用していることと、推奨されるクレジット表記を記載する。"
        - "[ ] 「## ライセンス」セクションを新たに追加し、このプロジェクトのライセンス（例: MIT License）を明記する。"
        - "[ ] 全ての変更をレビューし、プルリクエストを作成する。"
      labels:
        - "type:feature"
        - "layer:documentation"
        - "priority:medium"
      dependencies:
        - "TASK-ATTRIBUTION-DOC-01_Issue" # このタスクの成果を反映するため